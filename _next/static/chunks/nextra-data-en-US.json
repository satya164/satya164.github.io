{"/posts/automated-release-on-github-actions":{"title":"Automated Release on GitHub Actions","data":{"":"Release It! is a tool to automate releases for npm packages. It can be used to automatically bump the version, generate changelog based, create a git tag, push the changes to the repository, and publish the package to npm.The version bump and changelog generation is based on the commit messages. It uses Conventional Commits by default.This guide documents how to configure GitHub Actions to automatically release npm packages on every commit using release-it.","step-1#Step 1":"Install release-it and @release-it/conventional-changelog as dev dependencies:\nyarn add --dev release-it @release-it/conventional-changelog\nConfigure release-it in the package.json file:\n{\n  ...\n  \"release-it\": {\n    \"git\": {\n      \"commitMessage\": \"chore: release ${version}\",\n      \"tagName\": \"v${version}\"\n    },\n    \"npm\": {\n      \"publish\": true\n    },\n    \"github\": {\n      \"release\": true\n    },\n    \"plugins\": {\n      \"@release-it/conventional-changelog\": {\n        \"preset\": {\n          \"name\": \"conventionalcommits\"\n        },\n        \"infile\": \"CHANGELOG.md\"\n      }\n    }\n  },\n  ...\n}","step-2#Step 2":"Create a NPM token with publish access. You can create one at https://www.npmjs.com/settings/[username]/tokens (replace [username] with your username):\nClick on \"Generate New Token\" and select \"Granular Access Token\"\nProvide a token name and expiration date\nUnder \"Packages and scopes\", select \"Read and write\" for permissions\nThen select \"Only select packages and scopes\" and select the package you want to publish\nClick \"Generate token\" and copy the token\nThen the token needs to be added as a secret in the GitHub repository:\nGo to the repository and click on \"Settings\"\nClick on \"Secrets and variables\" and choose \"Actions\"\nClick \"New repository secret\" and add the token as NPM_PUBLISH_TOKEN\nClick on \"Add secret\" to save the token\nThis token will be used to authenticate with NPM to publish the package.","step-3#Step 3":"Create a GitHub personal access token with the repo scope. You can create one at https://github.com/settings/tokens/new?scopes=repo&description=release-it.Then the token needs to be added as a secret in the GitHub repository:\nGo to the repository and click on \"Settings\"\nClick on \"Secrets and variables\" and choose \"Actions\"\nClick \"New repository secret\" and add the token as PERSONAL_ACCESS_TOKEN\nClick on \"Add secret\" to save the token\nA personal access token is necessary to be able to push the changes back to the repository if the release branch is protected. The user associated with the token needs to have admin access to the repository and be able to bypass branch protection rules.Keep in mind that other collaborators on the repo can push actions that use this token and push commits acting as the user associated with the token.If there are no branch protection rules in the repository, then the GITHUB_TOKEN secret can be used instead of a personal access token.","step-4#Step 4":"Create a GitHub Actions workflow file in .github/workflows/release.yml with the following contents:\nname: Release package\non:\n  workflow_run:\n    branches:\n      - main\n    workflows:\n      # List of workflows that runs tests, linting, etc.\n      # This ensures that the release is only triggered when the tests pass.\n      - CI\n    types:\n      - completed\njobs:\n  check-commit:\n    runs-on: ubuntu-latest\n    # Skip if the workflow run for tests, linting etc. is not successful\n    # Without this, the release will be triggered after the previous workflow run even if it failed.\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    outputs:\n      skip: ${{ steps.commit-message.outputs.skip }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      # Check if the commit message is a release commit\n      # Without this, there will be an infinite loop of releases\n      - name: Get commit message\n        id: commit-message\n        run: |\n          MESSAGE=$(git log --format=%B -n 1 $(git log -1 --pretty=format:\"%h\"))\n          if [[ $MESSAGE == \"chore: release \"* ]]; then\n            echo \"skip=true\" >> $GITHUB_OUTPUT\n          fi\n  release:\n    runs-on: ubuntu-latest\n    needs: check-commit\n    # Skip if the commit message is a release commit\n    if: ${{ needs.check-commit.outputs.skip != 'true' }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          # This is needed to generate the changelog from commit messages\n          fetch-depth: 0\n          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n      - name: Install dependencies\n        run: yarn install --immutable\n        shell: bash\n      - name: Configure Git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n      - name: Create release\n        run: |\n          npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN\n          yarn release-it --ci\n        env:\n          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}\nThis workflow will automatically publish a new version of the package on every commit to the main branch. Make sure to go through the workflow file and modify it according to your needs, especially the workflows list in the on section.Alternatively, instead of publishing on every commit, the workflow_dispatch event can be used to manually trigger the workflow from the Actions tab in the repository. See the documentation for more details."}},"/posts":{"title":"Posts","data":{}}}